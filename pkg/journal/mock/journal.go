// Code generated by MockGen. DO NOT EDIT.
// Source: ./journal.go
//
// Generated by this command:
//
//	mockgen -source=./journal.go -destination=mock/journal.go
//

// Package mock_journal is a generated GoMock package.
package mock_journal

import (
	reflect "reflect"

	db "github.com/GianOrtiz/bean/pkg/db"
	journal "github.com/GianOrtiz/bean/pkg/journal"
	money "github.com/GianOrtiz/bean/pkg/money"
	gomock "go.uber.org/mock/gomock"
)

// MockEntryRepository is a mock of EntryRepository interface.
type MockEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEntryRepositoryMockRecorder
}

// MockEntryRepositoryMockRecorder is the mock recorder for MockEntryRepository.
type MockEntryRepositoryMockRecorder struct {
	mock *MockEntryRepository
}

// NewMockEntryRepository creates a new mock instance.
func NewMockEntryRepository(ctrl *gomock.Controller) *MockEntryRepository {
	mock := &MockEntryRepository{ctrl: ctrl}
	mock.recorder = &MockEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryRepository) EXPECT() *MockEntryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEntryRepository) Create(transactionID, journalAccountID string, amount money.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transactionID, journalAccountID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEntryRepositoryMockRecorder) Create(transactionID, journalAccountID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEntryRepository)(nil).Create), transactionID, journalAccountID, amount)
}

// EnableTransaction mocks base method.
func (m *MockEntryRepository) EnableTransaction(arg0 db.DBTx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableTransaction", arg0)
}

// EnableTransaction indicates an expected call of EnableTransaction.
func (mr *MockEntryRepositoryMockRecorder) EnableTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTransaction", reflect.TypeOf((*MockEntryRepository)(nil).EnableTransaction), arg0)
}

// GetByJournalAccountID mocks base method.
func (m *MockEntryRepository) GetByJournalAccountID(journalAccountID string) ([]*journal.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJournalAccountID", journalAccountID)
	ret0, _ := ret[0].([]*journal.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJournalAccountID indicates an expected call of GetByJournalAccountID.
func (mr *MockEntryRepositoryMockRecorder) GetByJournalAccountID(journalAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJournalAccountID", reflect.TypeOf((*MockEntryRepository)(nil).GetByJournalAccountID), journalAccountID)
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepository) Create(id string, initialBalance money.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", id, initialBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(id, initialBalance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), id, initialBalance)
}

// EnableTransaction mocks base method.
func (m *MockAccountRepository) EnableTransaction(arg0 db.DBTx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableTransaction", arg0)
}

// EnableTransaction indicates an expected call of EnableTransaction.
func (mr *MockAccountRepositoryMockRecorder) EnableTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTransaction", reflect.TypeOf((*MockAccountRepository)(nil).EnableTransaction), arg0)
}

// GetByID mocks base method.
func (m *MockAccountRepository) GetByID(id string) (*journal.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*journal.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccountRepository)(nil).GetByID), id)
}

// GetByUserID mocks base method.
func (m *MockAccountRepository) GetByUserID(userID int) (*journal.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].(*journal.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockAccountRepositoryMockRecorder) GetByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockAccountRepository)(nil).GetByUserID), userID)
}

// Update mocks base method.
func (m *MockAccountRepository) Update(account *journal.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountRepositoryMockRecorder) Update(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountRepository)(nil).Update), account)
}

// MockAccountUseCase is a mock of AccountUseCase interface.
type MockAccountUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAccountUseCaseMockRecorder
}

// MockAccountUseCaseMockRecorder is the mock recorder for MockAccountUseCase.
type MockAccountUseCaseMockRecorder struct {
	mock *MockAccountUseCase
}

// NewMockAccountUseCase creates a new mock instance.
func NewMockAccountUseCase(ctrl *gomock.Controller) *MockAccountUseCase {
	mock := &MockAccountUseCase{ctrl: ctrl}
	mock.recorder = &MockAccountUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountUseCase) EXPECT() *MockAccountUseCaseMockRecorder {
	return m.recorder
}

// FindEntries mocks base method.
func (m *MockAccountUseCase) FindEntries(journalAccountID string) ([]*journal.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntries", journalAccountID)
	ret0, _ := ret[0].([]*journal.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntries indicates an expected call of FindEntries.
func (mr *MockAccountUseCaseMockRecorder) FindEntries(journalAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntries", reflect.TypeOf((*MockAccountUseCase)(nil).FindEntries), journalAccountID)
}

// FindUserAccount mocks base method.
func (m *MockAccountUseCase) FindUserAccount(userID int) (*journal.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserAccount", userID)
	ret0, _ := ret[0].(*journal.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserAccount indicates an expected call of FindUserAccount.
func (mr *MockAccountUseCaseMockRecorder) FindUserAccount(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserAccount", reflect.TypeOf((*MockAccountUseCase)(nil).FindUserAccount), userID)
}

// Transact mocks base method.
func (m *MockAccountUseCase) Transact(fromUserID, toUserID int, amount money.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transact", fromUserID, toUserID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transact indicates an expected call of Transact.
func (mr *MockAccountUseCaseMockRecorder) Transact(fromUserID, toUserID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transact", reflect.TypeOf((*MockAccountUseCase)(nil).Transact), fromUserID, toUserID, amount)
}
